{{- $nodeDevInstall := and .Values.developer.enabled (empty .Values.developer.mountedNodeModuleToInstall | not) -}}
{{- $nodeMountedModulePath := $nodeDevInstall | ternary (printf "%s/%s" .Values.developer.sourcePath .Values.developer.mountedNodeModuleToInstall) "" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "diracx.fullname" . }}-web
  labels:
    {{- include "diracx.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCountWeb }}
  selector:
    matchLabels:
      {{- include "diracxWeb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "diracxWeb.selectorLabels" . | nindent 8 }}

    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "diracx.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- if $nodeDevInstall }}
        # This volume is used to mount the source code of the diracx-web repository
        - name: diracx-web-code-mount
          persistentVolumeClaim:
            claimName: pvc-diracx-code
        # These volumes override the node_modules directories to
        # start from a clean state
        - name: diracx-web-scratch-node-modules
          emptyDir:
            sizeLimit: 2Gi
        {{- range $module := .Values.developer.nodeWorkspacesDirectories }}
        - name: 'diracx-web-scratch-node-modules-{{ replace "/" "-" $module -}}'
          emptyDir:
            sizeLimit: 2Gi
        {{- end }}
        {{- else }}
        {{- if .Values.diracxWeb.branch }}
        # This volume is used to clone the specified diracx-web repository branch
        - name: diracx-web-code
          emptyDir:
            sizeLimit: 2Gi
        # This volume is used to store the static files of the diracx-web repository
        - name: diracx-web-static-files
          emptyDir:
            sizeLimit: 2Gi
        {{- end }}
        {{- end }}

      initContainers:
        {{- if and (not $nodeDevInstall) .Values.diracxWeb.branch }}
        # This init container is used to clone the specified diracx-web repository branch
        - name: clone-diracx-web
          image: ghcr.io/diracgrid/diracx/secret-generation:latest
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Clone the specified diracx-web repository branch
              git clone --single-branch -b {{ .Values.diracxWeb.branch }} {{ required "A valid .Values.diracxWeb.repoURL is required!" .Values.diracxWeb.repoURL }} /diracx-web;

          volumeMounts:
            - mountPath: "/diracx-web"
              name: "diracx-web-code"
        {{- end }}

        {{- if or $nodeDevInstall .Values.diracxWeb.branch }}
        # This init container is used to install the node module
        - name: install-diracx-web
          image: {{ .Values.developer.nodeImage }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}

          {{- if $nodeDevInstall }}
          # Install the mounted node module
          command: ["npm", "ci"]
          workingDir: "{{ $nodeMountedModulePath }}"

          # These volumes contain the source code of the mounted diracx-web directory,
          # minus the node_modules and next directories
          volumeMounts:
            - mountPath: "{{ $nodeMountedModulePath }}"
              name: "diracx-web-code-mount"
              subPath: "{{ .Values.developer.mountedNodeModuleToInstall }}"
            - mountPath: "{{ $nodeMountedModulePath }}/node_modules"
              name: "diracx-web-scratch-node-modules"
            {{- range $module := .Values.developer.nodeWorkspacesDirectories }}
            - mountPath: "{{ $nodeMountedModulePath }}/{{ $module }}/node_modules"
              name: 'diracx-web-scratch-node-modules-{{ replace "/" "-" $module -}}'
            {{- end }}
          {{- else }}
          # Install the diracx-web repository, specific branch
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Install dependencies and build the app
              npm ci && \
              npm run build && \
              mv out/* /app/
          workingDir: "/diracx-web"
          env:
            # Disable telemetry
            - name: NEXT_TELEMETRY_DISABLED
              value: "1"
            # Disable Cypress installation
            - name: CYPRESS_INSTALL_BINARY
              value: "0"
            # Set the cache folders to avoid getting permissions errors
            - name: CYPRESS_CACHE_FOLDER
              value: "/tmp/.cypress"
            - name: npm_config_cache
              value: "/tmp/.npm"
          # RAM usage can be high, so we can set a larger limit if needed
          {{- with .Values.diracxWeb.installDiracxWeb }}
          {{- with .resources}}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            # This volume contains the source code of the cloned diracx-web repository
            - mountPath: "/diracx-web"
              name: "diracx-web-code"
            # This volume will contain the static files of the diracx-web repository
            - mountPath: "/app"
              name: "diracx-web-static-files"
          {{- end }}
        {{- end }}


      containers:
        - name: {{ .Chart.Name }}-web
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.diracxWeb.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http

          {{- if $nodeDevInstall }}
          # Start the node module in development mode
          image: {{ .Values.developer.nodeImage }}
          command: ["npm", "run", "dev"]
          workingDir: "{{ $nodeMountedModulePath }}"
          env:
            - name: NEXT_TELEMETRY_DISABLED
              value: "1"
            - name: PORT
              value: "{{ .Values.diracxWeb.service.port }}"
          volumeMounts:
            - mountPath: "{{ $nodeMountedModulePath }}"
              name: "diracx-web-code-mount"
              subPath: "{{ .Values.developer.mountedNodeModuleToInstall }}"
            - mountPath: "{{ $nodeMountedModulePath }}/node_modules"
              name: "diracx-web-scratch-node-modules"
            {{- range $module := .Values.developer.nodeWorkspacesDirectories }}
            - mountPath: "{{ $nodeMountedModulePath }}/{{ $module }}/node_modules"
              name: 'diracx-web-scratch-node-modules-{{ replace "/" "-" $module -}}'
            {{- end }}
          {{- else }}
          # Start the node module in production mode
          image: {{ .Values.global.images.web.repository }}:{{ .Values.global.images.web.tag }}

          {{ if .Values.diracxWeb.branch }}
          # Start it from the specified branch
          volumeMounts:
            - mountPath: "/usr/share/nginx/html"
              name: "diracx-web-static-files"
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
