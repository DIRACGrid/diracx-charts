apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "diracx.fullname" . }}
  labels:
    {{- include "diracx.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "diracx.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/settings: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        checksum/entrypoint: {{ include (print $.Template.BasePath "/diracx-container-entrypoint.yaml") . | sha256sum }}
      labels:
        {{- include "diracx.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "diracx.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: cs-store-mount
          {{- if and (.Values.developer.enabled) (.Values.developer.localCSPath) }}
          persistentVolumeClaim:
            claimName: pvc-cs-store
          {{- else }}
          emptyDir:
          sizeLimit: 5Mi
          {{- end }}
        {{- if and .Values.developer.enabled .Values.developer.modulesToInstall }}
        - name: diracx-code-mount
          persistentVolumeClaim:
            claimName: pvc-diracx-code
        {{- range $module := .Values.developer.modulesToInstall }}
        - name: {{ lower $module }}-editable-install
          empty-dir:
          sizeLimit: 5Mi
        {{- end }}
        {{- end }}
        - name: container-entrypoint
          configMap:
            name: diracx-container-entrypoint
        - name: signing-key-mount
          emptyDir:
          sizeLimit: 5Mi
        {{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
        - name: coverage-data
          persistentVolumeClaim:
            claimName: pvc-coverage
        {{- end }}

      {{/* Define common volume mounts for reusability */}}
      {{- $commonVolumeMounts := list }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/cs_store" "name" "cs-store-mount" "readOnly" false) }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/signing-key" "name" "signing-key-mount" "readOnly" false) }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/entrypoint.sh" "name" "container-entrypoint" "subPath" "entrypoint.sh") }}
      {{- if and .Values.developer.enabled .Values.developer.enableCoverage }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/diracx-coveragerc" "name" "container-entrypoint" "subPath" "coveragerc") }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" "/coverage-reports" "name" "coverage-data" "readOnly" false) }}
      {{- end }}
      {{- if and .Values.developer.enabled .Values.developer.modulesToInstall }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" .Values.developer.sourcePath "name" "diracx-code-mount" "readOnly" true) }}
      {{- range $module := .Values.developer.modulesToInstall }}
      {{- $commonVolumeMounts = append $commonVolumeMounts (dict "mountPath" (printf "%s/%s/src/%s.egg-info" $.Values.developer.sourcePath $module $module) "name" (printf "%s-editable-install" (lower $module)) "readOnly" false) }}
      {{- end }}
      {{- end }}

      initContainers:
      - name: init-cs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "/entrypoint.sh"]
        args:
          - "dirac"
          - "internal"
          - "generate-cs"
          - "/cs_store/initialRepo"
          - "--vo=diracAdmin"
          - "--user-group=admin"
          - "--idp-url={{ .Values.dex.config.issuer }}"
          {{- with (first .Values.dex.config.staticClients) }}
          - "--idp-client-id={{ .id }}"
          {{- end }}
        volumeMounts: {{ toYaml $commonVolumeMounts | nindent 10 }}
      - name: init-cs-user
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "/entrypoint.sh"]
        args:
          - "dirac"
          - "internal"
          - "add-user"
          - "/cs_store/initialRepo"
          - "--vo=diracAdmin"
          - "--user-group=admin"
          - "--sub=EgVsb2NhbA"
        volumeMounts: {{ toYaml $commonVolumeMounts | nindent 10 }}
      - name: init-signing-key
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: [/dockerMicroMambaEntrypoint.sh]
        args:
          - "ssh-keygen"
          - "-P"
          - ""
          - "-trsa"
          - "-b4096"
          - "-mPEM"
          - "-f/signing-key/rs256.key"
        volumeMounts: {{ toYaml $commonVolumeMounts | nindent 10 }}
      {{- if .Values.diracx.manageSQLSchema }}
      - name: create-sql-db-schema
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "/entrypoint.sh"]
        args: ["python", "-m", "diracx.db", "init-sql"]
        volumeMounts: {{ toYaml $commonVolumeMounts | nindent 10 }}
        envFrom:
          - secretRef:
              name: diracx-init-mysql-secrets
      {{- end }}
      {{- if .Values.diracx.manageOSIndices }}
      - name: create-os-db-indices
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["bash", "/entrypoint.sh"]
        args: ["python", "-m", "diracx.db", "init-os"]
        volumeMounts: {{ toYaml $commonVolumeMounts | nindent 10 }}
        envFrom:
          - secretRef:
              name: diracx-init-os-secrets
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /api/docs/
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /api/docs/
          #     port: http
          command: ["bash", "/entrypoint.sh"]
          args:
            - uvicorn
            - --factory
            - diracx.routers:create_app
            - --host=0.0.0.0
            - --port=8000
          {{- if .Values.developer.enabled }}
            - "--reload"
            - "--proxy-headers"
            {{- if .Values.developer.modulesToInstall }}
            - "--reload-dir={{ .Values.developer.sourcePath }}"
            {{- end }}
          {{- end }}
          volumeMounts: {{ toYaml $commonVolumeMounts | nindent 12 }}
          envFrom:
            # - configMapRef:
            #     name: diracx-env-config
            - secretRef:
                name: diracx-secrets
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
